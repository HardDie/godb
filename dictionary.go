package godb

import (
	"github.com/dimonrus/gohelp"
	"os"
	"os/exec"
	"text/template"
)

// Dictionary model interface
type IDictionaryMapping interface {
	Search(filter SqlFilter, db *DBO) ([]IDictionaryMapping, []int64, error)
	GetDictionaryType() string
	GetCode() string
}

// Create Table
func CreateDictionaryTable(db *DBO) error {
	query := `
CREATE TABLE IF NOT EXISTS dictionary
(
  id         INT  PRIMARY KEY    NOT NULL,
  type       TEXT                NOT NULL,
  code       TEXT                NOT NULL,
  label      TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT localtimestamp NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE,
  deleted_at TIMESTAMP WITH TIME ZONE
);

CREATE INDEX IF NOT EXISTS dictionary_type_idx
  ON dictionary (type);`

	_, err := db.Exec(query)
	if err != nil {
		return err
	}

	return nil
}

// Create or update dictionary mapping
func GenerateDictionaryMapping(path string, model IDictionaryMapping, db *DBO) error {
	filter := SqlFilter{}
	filter.AddOrder("type", "ASC")
	filter.AddOrder("created_at", "ASC")
	filter.AddOrder("id", "ASC")
	dictionaries, _, err := model.Search(filter, db)
	if err != nil {
		return err
	}

	f, err := os.Create(path)
	if err != nil {
		return err
	}
	defer f.Close()

	tml := getDictionaryTemplate()
	err = tml.Execute(f, struct {
		Dictionaries []IDictionaryMapping
	}{
		Dictionaries: dictionaries,
	})

	if err != nil {
		err = os.RemoveAll(path)
	}
	if err != nil {
		return err
	}

	cmd := exec.Command("go", "fmt", path)
	err = cmd.Run()
	if err != nil {
		return err
	}

	return nil
}

func getDictionaryTemplate() *template.Template {
	funcMap := template.FuncMap{
		"camelCase": func(str string) string {
			result, _ := gohelp.ToCamelCase(str, true)
			return result
		},
	}
	var dictionaryTemplate = template.Must(template.New("").Funcs(funcMap).
		Parse(`// autogenerated dictionary mapping file
package models

const ({{$dType := ""}}
	{{ range $item := .Dictionaries }}{{if ne $dType $item.GetDictionaryType}}{{$dType = $item.GetDictionaryType}}
{{ end }}{{ $item.GetDictionaryType | camelCase }}{{ $item.GetCode | camelCase }} = {{ $item.Id }}
{{ end }}
	{{ range $item := .Dictionaries }}{{if ne $dType $item.GetDictionaryType}}{{$dType = $item.GetDictionaryType}}
{{ end }}{{ $item.GetDictionaryType | camelCase }}{{ $item.GetCode | camelCase }}Code = "{{ $item.GetCode }}"
{{ end }}
)

var ({{$dType = ""}}
	{{ range $item := .Dictionaries }}
		{{if ne $dType $item.GetDictionaryType}}{{ if ne $dType ""}} } {{ end }}
			{{$dType = $item.GetDictionaryType}}
			Identifier{{ $item.GetDictionaryType | camelCase }}Map = map[int]string {
			{{ $item.GetDictionaryType | camelCase }}{{ $item.GetCode | camelCase }}: {{ $item.GetDictionaryType | camelCase }}{{ $item.GetCode | camelCase }}Code,{{ else }}{{ $item.GetDictionaryType | camelCase }}{{ $item.GetCode | camelCase }}: {{ $item.GetDictionaryType | camelCase }}{{ $item.GetCode | camelCase }}Code,{{ end }}{{ end }}
}
{{$dType = ""}}
	{{ range $item := .Dictionaries }}
		{{if ne $dType $item.GetDictionaryType}}{{ if ne $dType ""}} } {{ end }}
			{{$dType = $item.GetDictionaryType}}
			Code{{ $item.GetDictionaryType | camelCase }}Map = map[string]int {
			{{ $item.GetDictionaryType | camelCase }}{{ $item.GetCode | camelCase }}Code: {{ $item.GetDictionaryType | camelCase }}{{ $item.GetCode | camelCase }},{{ else }}{{ $item.GetDictionaryType | camelCase }}{{ $item.GetCode | camelCase }}Code: {{ $item.GetDictionaryType | camelCase }}{{ $item.GetCode | camelCase }},{{ end }}{{ end }}
}
)`))
	return dictionaryTemplate
}
