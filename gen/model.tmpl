package models

import (
{{ range $key, $import := .Imports }}{{ $import }}
{{ end }}
)

// {{ .Model }} model
type {{ .Model }} struct { {{ range $key, $column := .Columns }}
    {{ $column.ModelName }} {{ $column.ModelType }} {{ $column.Json }} {{ if $column.Description }}// {{ $column.Description }}{{ end }}{{ end }}
}

// Parse model column
func (m *{{ .Model }}) parse(rows *sql.Rows) (*{{ .Model }}, error) {
    err := rows.Scan(m.Values()...)
    if err != nil {
        return nil, err
    }
    return m, nil
}

// Model columns
func (m *{{ .Model }}) Columns() []string {
    return []string{ {{ range $key, $column := .Columns }}{{ if $key }}, {{ end }}"{{ $column.Name }}"{{ end }} }
}

// Model values
func (m *{{ .Model }}) Values() (values []interface{}) {
    return append(values, {{ range $key, $column := .Columns }}{{ if $key }}, {{ end }}{{ if $column.IsArray }}pq.Array({{ end }}&m.{{ $column.ModelName }}{{ if $column.IsArray  }}){{ end }}{{ end }})
}

// SQL load Query
func (m *{{ .Model }}) GetLoadQuery() string {
    return "SELECT " + strings.Join(m.Columns(), ",") + " FROM {{ .Table }} WHERE {{ $index := 0 }}{{ range $key, $column := .Columns }}{{ if $column.IsPrimaryKey }}{{ if $index }} AND {{ end }}{{ $index = inc $index }}{{ $column.Name }} = ${{ $index }}{{ end }}{{ end }};"
}

// Load method
func (m *{{ .Model }}) Load(q godb.Queryer) (*{{ .Model }}, error) {
    if {{ $index = 0 }}{{ range $key, $column := .Columns }}{{ if $column.IsPrimaryKey }}{{ if $index }} && {{ end }}{{ $index = inc $index }} m.{{ $column.ModelName }} != {{ if eq $column.ModelType "string" }}""{{ else }}0{{ end }}{{ end }}{{ end }} {
        iterator, err := q.Query(m.GetLoadQuery(), {{ $index = 0 }}{{ range $key, $column := .Columns }}{{ if $column.IsPrimaryKey }}{{ if $index }}, {{ end }}{{ $index = inc $index }}m.{{ $column.ModelName }}{{ end }}{{ end }})
        if err != nil && err != sql.ErrNoRows {
            return nil, err
        }
        if iterator == nil {
            return nil, errors.New("iterator is nil, nothing for load")
        }
        defer iterator.Close()
        if iterator.Next() == false {
            return nil, nil
        }
        return m.parse(iterator)
    }
    return nil, errors.New("no primary key specified, nothing for load")
}

{{ range $key, $column := .Columns }}{{ if $column.ForeignTable }}
    // Load Foreign Model {{ cameled $column.ForeignTable }}
    func (m *{{ $.Model }}) Get{{ cameled $column.ForeignTable }}(q godb.Queryer) (*{{ cameled $column.ForeignTable }}, error) {
        return (&{{ cameled $column.ForeignTable }} { {{ cameled $column.ForeignColumnName}}:m.{{ $column.ModelName }} }).Load(q)
    }
{{ end }}{{ end }}

// SQL delete Query
func (m *{{ .Model }}) GetDeleteQuery() string {
    return "DELETE FROM {{ .Table }} WHERE {{ $index = 0 }}{{ range $key, $column := .Columns }}{{ if $column.IsPrimaryKey }}{{ if $index }} AND {{ end }}{{ $index = inc $index }}{{ $column.Name }} = ${{$index}}{{ end }}{{ end }};"
}

// Delete method
func (m *{{ .Model }}) Delete(q godb.Queryer) error {
    _, err := q.Exec(m.GetDeleteQuery(), {{ $index = 0 }}{{ range $key, $column := .Columns }}{{ if $column.IsPrimaryKey }}{{ if $index }}, {{ end }}{{ $index = inc $index }}m.{{ $column.ModelName }}{{ end }}{{ end }})
    return err
}

// SQL exists Query
func (m *{{ .Model }}) GetExistsQuery() string {
    return "SELECT EXISTS (SELECT 1 FROM {{ .Table }}) WHERE {{ $index = 0 }}{{ range $key, $column := .Columns }}{{ if $column.IsPrimaryKey }}{{ if $index }} AND {{ end }}{{ $index = inc $index }}{{ $column.Name }} = ${{$index}}{{ end }}{{ end }};"
}

// Exists method
func (m *{{ .Model }}) IsExists(q godb.Queryer) (exists bool, err error) {
    err = q.QueryRow(m.GetExistsQuery(), {{ $index = 0 }}{{ range $key, $column := .Columns }}{{ if $column.IsPrimaryKey }}{{ if $index }}, {{ end }}{{ $index = inc $index }}m.{{ $column.ModelName }}{{ end }}{{ end }}).Scan(&exists)
    return
}

{{ if .HasSequence }}
    // Model saver method with sequence
    func (m *{{ .Model }}) Save(q godb.Queryer) (*{{ .Model }}, error) {
        var err error
        if {{ $index = 0 }}{{ range $key, $column := .Columns }}{{ if $column.IsPrimaryKey }}{{ if $index }} && {{ end }}{{ $index = inc $index }} m.{{ $column.ModelName }} != {{ if eq $column.ModelType "string" }}""{{ else }}0{{ end }}{{ end }}{{ end }} {
            err = q.QueryRow(m.GetSaveQuery(), {{ $index = 0 }}{{ range $key, $column := .Columns }}{{ if or (not (system $column)) $column.IsPrimaryKey }}{{ if $index }}, {{ end }}&m.{{ $column.ModelName }}{{ $index = inc $index }}{{ end}}{{ end}}).
            Scan({{ $index = 0 }}{{ range $key, $column := .Columns }}{{ if (system $column) }}{{ if $index }}, {{ end }}&m.{{ $column.ModelName }}{{ $index = inc $index }}{{ end}}{{ end}})
        } else {
            err = q.QueryRow(m.GetSaveQuery(), {{ $index = 0 }}{{ range $key, $column := .Columns }}{{ if not (system $column) }}{{ if $index }}, {{ end }}&m.{{ $column.ModelName }}{{ $index = inc $index }}{{ end}}{{ end}}).
            Scan({{ $index = 0 }}{{ range $key, $column := .Columns }}{{ if (system $column) }}{{ if $index }}, {{ end }}&m.{{ $column.ModelName }}{{ $index = inc $index }}{{ end}}{{ end}})
        }
        if err != nil {
            return nil, err
        }
        return m, nil
    }

    // SQL upsert Query
    func (m *{{ .Model }}) GetSaveQuery() string {
        if {{ $index := 0 }}{{ range $key, $column := .Columns }}{{ if $column.IsPrimaryKey }}{{ if $index }} && {{ end }}{{ $index = inc $index }} m.{{ $column.ModelName }} != {{ if eq $column.ModelType "string" }}""{{ else }}0{{ end }}{{ end }}{{ end }} {
            return `UPDATE {{ .Table }} SET {{ $index = 0 }}{{ range $key, $column := .Columns }}{{ if not (system $column) }}{{ if $index }}, {{ end }}{{ $index = inc $index }}{{ $column.Name }} = ${{ inc $key }}{{ end }}{{ end }}{{ range $key, $column := .Columns }}{{ if eq $column.Name "updated_at" }}, updated_at = NOW(){{ end }}{{ end }}
            WHERE {{ $index = 0 }}{{ range $key, $column := .Columns }}{{ if $column.IsPrimaryKey }}{{ if $index }} AND {{ end }}{{ $index = inc $index }}{{ $column.Name }} = ${{ $index }}{{ end }}{{ end }}
            {{ $index = 0 }}{{ range $key, $column := .Columns }}{{ if (system $column) }}{{ if eq $index 0 }}RETURNING {{ end }}{{ if $index }}, {{ end }}{{ $column.Name }}{{ $index = inc $index }}{{ end}}{{ end}};`
        }
        return `INSERT INTO {{ .Table }} ({{ $index = 0 }}{{ range $key, $column := .Columns }}{{ if not (system $column) }}{{ if $index }}, {{ end }}{{ $index = inc $index }}{{ $column.Name }}{{ end}}{{ end}}) VALUES ({{ $index = 0 }}{{ range $key, $column := .Columns }}{{ if not (system $column) }}{{ if $index }}, {{ end }}{{ $index = inc $index }}${{ $index }}{{ end }}{{ end }})
        {{ $index = 0 }}{{ range $key, $column := .Columns }}{{ if (system $column) }}{{ if eq $index 0 }}RETURNING {{ end }}{{ if $index }}, {{ end }}{{ $index = inc $index }}{{ $column.Name }}{{ end}}{{ end}};`
    }

{{ else }}
    // Model saver method without sequence
    func (m *{{ .Model }}) Save(q godb.Queryer) (*{{ .Model }}, error) {
        err := q.QueryRow(m.GetSaveQuery(), {{ $index = 0 }}{{ range $key, $column := .Columns }}{{ if or (not (system $column)) $column.IsPrimaryKey }}{{ if $index }}, {{ end }}&m.{{ $column.ModelName }}{{ $index = inc $index }}{{ end}}{{ end}}).
        Scan({{ $index = 0 }}{{ range $key, $column := .Columns }}{{ if (system $column) }}{{ if $index }}, {{ end }}&m.{{ $column.ModelName }}{{ $index = inc $index }}{{ end}}{{ end}})
        if err != nil {
            return nil, err
        }
        return m, nil
    }

    // SQL upsert Query
    func (m *{{ .Model }}) GetSaveQuery() string {
        if {{ $index := 0 }}{{ range $key, $column := .Columns }}{{ if $column.IsPrimaryKey }}{{ if $index }} && {{ end }}{{ $index = inc $index }} m.{{ $column.ModelName }} != {{ if eq $column.ModelType "string" }}""{{ else }}0{{ end }}{{ end }}{{ end }} {
            return `UPDATE {{ .Table }} SET {{ $index = 0 }}{{ range $key, $column := .Columns }}{{ if not (system $column) }}{{ if $index }}, {{ end }}{{ $index = inc $index }}{{ $column.Name }} = ${{ inc $key }}{{ end }}{{ end }}{{ range $key, $column := .Columns }}{{ if eq $column.Name "updated_at" }}, updated_at = NOW(){{ end }}{{ end }}
            WHERE {{ $index = 0 }}{{ range $key, $column := .Columns }}{{ if $column.IsPrimaryKey }}{{ if $index }} AND {{ end }}{{ $index = inc $index }}{{ $column.Name }} = ${{ $index }}{{ end }}{{ end }}
            {{ $index = 0 }}{{ range $key, $column := .Columns }}{{ if (system $column) }}{{ if eq $index 0 }}RETURNING {{ end }}{{ if $index }}, {{ end }}{{ $column.Name }}{{ $index = inc $index }}{{ end}}{{ end}};`
        }
        return `INSERT INTO {{ .Table }} ({{ $index = 0 }}{{ range $key, $column := .Columns }}{{ if not (system $column) }}{{ if $index }}, {{ end }}{{ $index = inc $index }}{{ $column.Name }}{{ end}}{{ end}}) VALUES ({{ $index = 0 }}{{ range $key, $column := .Columns }}{{ if not (system $column) }}{{ if $index }}, {{ end }}{{ $index = inc $index }}${{ $index }}{{ end }}{{ end }})
        {{ $index = 0 }}{{ range $key, $column := .Columns }}{{ if (system $column) }}{{ if eq $index 0 }}RETURNING {{ end }}{{ if $index }}, {{ end }}{{ $index = inc $index }}{{ $column.Name }}{{ end}}{{ end}};`
    }
{{ end }}

// Search by filter
func Search{{ .Model }}(q godb.Queryer, filter *godb.SqlFilter) (*[]{{ .Model }}, {{ $index = 0 }}{{ range $key, $column := .Columns }}{{ if $column.IsPrimaryKey }}{{ if $index }}, {{ end }}{{ $index = inc $index }}[]{{ $column.ModelType }}{{ end }}{{ end }}, error) {
    query := fmt.Sprintf("SELECT " + strings.Join((&{{ .Model }}{}).Columns(), ",") + " FROM {{ .Table }} %s", filter.GetWithWhere())
    rows, err := q.Query(query, filter.GetArguments()...)
    {{ range $key, $column := .Columns }}{{ if $column.IsPrimaryKey }}
        entity{{ $column.ModelName }}s := make([]{{ $column.ModelType }}, 0){{ end }}{{ end }}
    if err != nil {
        return nil, {{ $index = 0 }}{{ range $key, $column := .Columns }}{{ if $column.IsPrimaryKey }}{{ if $index }}, {{ end }}{{ $index = inc $index }}entity{{ $column.ModelName }}s{{ end }}{{ end }}, err
    }
    defer rows.Close()
    var result []{{ .Model }}
    for rows.Next() {
        row, err := (&{{ .Model }}{}).parse(rows)
        if err != nil {
            return &result, {{ $index = 0 }}{{ range $key, $column := .Columns }}{{ if $column.IsPrimaryKey }}{{ if $index }}, {{ end }}{{ $index = inc $index }}entity{{ $column.ModelName }}s{{ end }}{{ end }}, err
        }
        {{ range $key, $column := .Columns }}{{ if $column.IsPrimaryKey }}
            entity{{ $column.ModelName }}s = append(entity{{ $column.ModelName }}s, row.{{ $column.ModelName}}){{ end }}{{ end }}
        result = append(result, *row)
    }
    return &result, {{ $index = 0 }}{{ range $key, $column := .Columns }}{{ if $column.IsPrimaryKey }}{{ if $index }}, {{ end }}{{ $index = inc $index }}entity{{ $column.ModelName }}s{{ end }}{{ end }}, nil
}